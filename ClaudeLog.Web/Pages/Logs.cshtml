@page
@model LogsModel
@{
    ViewData["Title"] = "Diagnostics Logs";
}

<div class="container py-3">
    <h3>Diagnostics Logs</h3>

    <div class="row g-2 align-items-end mb-3">
        <div class="col-auto">
            <label class="form-label">Min Level</label>
            <select id="minLevel" class="form-select form-select-sm">
                <option value="">(any)</option>
                <option value="0">Trace</option>
                <option value="1">Debug</option>
                <option value="2">Info</option>
                <option value="3">Warning</option>
                <option value="4" selected>Error</option>
                <option value="5">Critical</option>
            </select>
        </div>
        <div class="col-auto">
            <label class="form-label">Source</label>
            <input id="sourceFilter" class="form-control form-control-sm" placeholder="Hook.Claude, MCP, WebApi..." />
        </div>
        <div class="col-auto">
            <label class="form-label">Sort</label>
            <select id="sortKey" class="form-select form-select-sm">
                <option value="createdAt-desc">Time (newest)</option>
                <option value="createdAt-asc">Time (oldest)</option>
                <option value="logLevel-desc">Level (high→low)</option>
                <option value="logLevel-asc">Level (low→high)</option>
                <option value="source-asc">Source (A→Z)</option>
                <option value="source-desc">Source (Z→A)</option>
            </select>
        </div>
        <div class="col-auto">
            <button id="refresh" class="btn btn-sm btn-primary">Refresh</button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-sm table-striped">
            <thead>
                <tr>
                    <th>Time</th>
                    <th>Level</th>
                    <th>Source</th>
                    <th>Message</th>
                    <th>Session</th>
                    <th>Entry</th>
                    <th>Path</th>
                </tr>
            </thead>
            <tbody id="logsBody">
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-2">
        <div class="small text-muted" id="pageInfo"></div>
        <div class="btn-group">
            <button id="prevPage" class="btn btn-sm btn-outline-secondary">Prev</button>
            <button id="nextPage" class="btn btn-sm btn-outline-secondary">Next</button>
        </div>
    </div>
</div>

<script>
    let currentPage = 1;
    const pageSize = 100;

    async function loadLogs() {
        const minLevel = document.getElementById('minLevel').value;
        const source = document.getElementById('sourceFilter').value.trim();
        const sortKey = document.getElementById('sortKey').value;
        const url = new URL('/api/errors', window.location.origin);
        if (minLevel !== '') url.searchParams.set('minLevel', minLevel);
        if (source !== '') url.searchParams.set('source', source);
        url.searchParams.set('page', String(currentPage));
        url.searchParams.set('pageSize', String(pageSize));

        const res = await fetch(url);
        let items = await res.json();

        // Client-side sort of current page
        const [key, dir] = sortKey.split('-');
        items.sort((a, b) => {
            let av = a[key];
            let bv = b[key];
            if (key === 'createdAt') { av = new Date(a.createdAt).getTime(); bv = new Date(b.createdAt).getTime(); }
            if (typeof av === 'string') { av = av.toLowerCase(); bv = bv.toLowerCase(); }
            if (av < bv) return dir === 'asc' ? -1 : 1;
            if (av > bv) return dir === 'asc' ? 1 : -1;
            return 0;
        });

        const tbody = document.getElementById('logsBody');
        tbody.innerHTML = items.map(r => `
            <tr>
                <td>${new Date(r.createdAt).toLocaleString()}</td>
                <td>${r.logLevel}</td>
                <td>${r.source}</td>
                <td><pre class="m-0" style="white-space: pre-wrap">${escapeHtml(r.message)}${r.detail ? '\n' + escapeHtml(r.detail) : ''}</pre></td>
                <td>${r.sessionId ?? ''}</td>
                <td>${r.entryId ?? ''}</td>
                <td>${r.path ?? ''}</td>
            </tr>
        `).join('');

        // Paging controls
        document.getElementById('pageInfo').textContent = `Page ${currentPage} (${items.length} rows)`;
        document.getElementById('prevPage').disabled = currentPage <= 1;
        document.getElementById('nextPage').disabled = items.length < pageSize;
    }

    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text ?? '';
        return div.innerHTML;
    }

    document.addEventListener('DOMContentLoaded', () => {
        document.getElementById('refresh').addEventListener('click', () => { currentPage = 1; loadLogs(); });
        document.getElementById('minLevel').addEventListener('change', () => { currentPage = 1; loadLogs(); });
        document.getElementById('sortKey').addEventListener('change', () => { loadLogs(); });
        document.getElementById('sourceFilter').addEventListener('keyup', (e) => { if (e.key === 'Enter') { currentPage = 1; loadLogs(); }});
        document.getElementById('prevPage').addEventListener('click', () => { if (currentPage > 1) { currentPage--; loadLogs(); }});
        document.getElementById('nextPage').addEventListener('click', () => { currentPage++; loadLogs(); });
        loadLogs();
    });
</script>
